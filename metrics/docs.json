{"documentation":{
	"methods":
	    {"/api/documentation": 
		{"description": "if options in empty, returns a key-list of available methods, else return a documentation for particular method",
		 "method": "GET", 
	 	 "data": "null", 
		 "Url_format":  {"method":"/api/documentation&method='string'"}}}
	},

"cities": {
	"methods": {
		"/cities/name": {
			"description": "return dict of available cities name",
			"method": "GET",
			"data": "null",
			"Url_format": "http://127.0.0.1:5000/cities/name"},
		"/cities/crs": {
			"description": "return dict of city name as key and crs as value",
			"method": "GET",
			"data": "null",
			"Url_format": "http://127.0.0.1:5000/cities/crs, http://127.0.0.1:5000/cities/crs?city=Krasnodar"},
		"/cities/metrics": {
			"description": "return dict of available metrics for city",
			"method": "GET",
			"data": "null",
			"Url_format": "http://127.0.0.1:5000/cities/metrics, http://127.0.0.1:5000/cities/metrics?city=Krasnodar"}
	}
},

"Connectivity_calculations":{
	"methods":{
		"/connectivity_calculations/connectivity_viewer":{
			"description": "return a valid geojson with polygons geoobjects equals to city blocks, contains data about pedastrian connectivity ratio, also returns a source point with same data and inputed area", 
			"method": "POST", 
			"data": "Valid geosjson required, epsg:4326", 
			"Url_format": "null"}},

	"examples": {
		"Python_request_sample":"requests.post('http://127.0.0.1:5000/connectivity_calculations/connectivity_viewer', data = json.dumps(test_area))", 
		"response_sample": "samples available in /connectivity_calculations/test test method",
		"test_area": {
			"type": "FeatureCollection",
			"name": "test_area",
			"crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
			"features": [
						{"type": "Feature", "properties": { "id": 1 }, 
						"geometry": { "type": "Polygon", 
				        "coordinates": [ [ [ 30.174388338572982, 59.941967144293095 ], [ 30.182716407035677, 59.957843695696468 ], 
											[ 30.217197532600515, 59.962744136082115 ], [ 30.236775798811063, 59.961427671062246 ], 
											[ 30.25445468098626, 59.957916841926007 ], [ 30.262490536520442, 59.95725852004739 ], 
											[ 30.270234179126103, 59.954186178343981 ], [ 30.279000566981569, 59.949942952459601 ], 
											[ 30.289228019479619, 59.947016273256956 ], [ 30.309536818011452, 59.944747919142024 ],
											[ 30.305884156405003, 59.940210745271827 ], [ 30.290689084122199, 59.935087383364937 ], 
											[ 30.279292779910083, 59.932012986280917 ], [ 30.272133563161454, 59.927766921805492 ], 
											[ 30.26614319812688, 59.919566086748141 ], [ 30.260737258949344, 59.917002910114164 ], 
											[ 30.244227228488217, 59.918760538279464 ], [ 30.227571091562822, 59.92644906714964 ],
											[ 30.211207167565952, 59.926668713227571 ], [ 30.186369068642126, 59.930475680873869 ],
											[ 30.17950206482201, 59.938893384949722 ], [ 30.174388338572982, 59.941967144293095 ] ] ] 
											} 
						}]}
	 	}
	},


"Trafiics_calculation":{
	"methods":{
		"/pedastrian_walk_traffics/pedastrian_walk_traffics_calculation":{
			"description": "Return a valid geojson file, contains a linestrings geobjects with data of predicted full-day time traffic between living houses and closer to it public transport stops", 
			"method": "POST", 
			"data": "Valid geosjson required, more in 'examples'", 
			"Url_format": "null"}},

	"examples":{
		"Python_request_sample":"requests.post('http://127.0.0.1:5000/pedastrian_walk_traffics/pedastrian_walk_traffics_calculation', data = json.dumps(test_area))",
		"test_area": {"type": "FeatureCollection", 
			           "name": "test_area", 
					   "crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:OGC:1.3:CRS84"}}, 
					   "features": [
						           {"type": "Feature", "properties": {}, 
								    "geometry": {"type": "Polygon", 
								    "coordinates": [[[30.253654233376736, 59.952160447703385], [30.255163054210676, 59.95547985353806], 
									                 [30.26592597615947, 59.954205738167175], [30.268843029771755, 59.95102044973996], 
												     [30.266428916437448, 59.94884104186871], [30.258013049119235, 59.94833810159073], 
											         [30.253654233376736, 59.952160447703385]]]}}]}
		}
	},


"mobility_analysis":{
	"methods":{
		"/mobility_analysis/routes":{
					"description": "return valid geojson, of a single linestring geoobject feature with route path between both of inputed points", 
					"method": "GET", 
				 	"data": "null", 
				 	"Url_format": "/mobility_analysis/routes?city=Saint_Petersburg&x_from=float&y_from=float3&x_to=float&y_to=float&travel_type=string(drive or walk)]",
				 	"requirements": "pair of float numbers equal to ESPG:4326 (x,y) coordinates, travel_type be set as drive or walk (string)"
					},

		"/mobility_analysis/isochrones":{
					"description": "return valid geojson, a bunch of Polygon geoobjects features with isochornes of inputed points, based on inputed minutes or distance (meters) intervals ", 
					"method": "GET", 
					"data": "null", 
					"Url_format": {"distance":"/mobility_analysis/isochrones?city=Saint_Petersburg&x_from=float&y_from=float&meters=[array]&travel_type=string(drive or walk or public transport)",
									"times":"/mobility_analysis/isochrones?city=Saint_Petersburg&&x_from=float&y_from=float&times=[array]&travel_type=string(drive or walk or public transport)"
									}, 
					"requirements": "pair of float numbers equal to ESPG:4326 (x,y) coordinates, times OR meters of array ([1,2,3,4] - times or [100,200,300] - meters), travel_type be set as drive or walk or public transpor (string)"
					} 
				}, 
	"examples": 
				{"Python_request_sample": ["requests.get('http://127.0.0.1:5000/mobility_analysis/isochrones?city=Saint_Petersburg&x_from=59.942886&y_from=30.278426&weight_type=time&weight_value=10&travel_type=drive')",
									       "requests.get('http://127.0.0.1:5000/mobility_analysis/isochrones?city=Saint_Petersburg&x_from=59.942886&y_from=30.278426&weight_type=meter&weight_value=2000&travel_type=drive')')",
									       "requests.get('http://127.0.0.1:5000/mobility_analysis/isochrones?city=Saint_Petersburg&x_from=59.942886&y_from=30.278426&weight_type=time&weight_value=20&travel_type=walk')",
									       "requests.get('http://127.0.0.1:5000/mobility_analysis/isochrones?city=Saint_Petersburg&x_from=59.942886&y_from=30.278426&weight_type=meter&weight_value=1500&travel_type=walk')",
									       "requests.get('http://127.0.0.1:5000/mobility_analysis/isochrones?city=Saint_Petersburg&x_from=59.942886&y_from=30.278426&weight_value=20&travel_type=public_transport')",
									       "requests.get('http://127.0.0.1:5000/mobility_analysis/routes?city=Saint_Petersburg&x_from=59.8059&y_from=30.4267&x_to=59.943653&y_to=30.288079&travel_type=drive')",
									       "requests.get('http://127.0.0.1:5000/mobility_analysis/routes?city=Saint_Petersburg&x_from=59.8059&y_from=30.4267&x_to=59.943653&y_to=30.288079&travel_type=walk')"]
				}},


"Visibility_analisys":{
	"methods":{
		 "/Visibility_analisys/Visability_analysis":{
			 "description": "Return a cutted linearring object, approximate to a flat visibility view zone", 
		  	 "method": "GET", 
		     "data": "Valid geosjson required, more in 'examples'", 
		     "Url_format": "/Visability_analisys?x_from=float&y_from=float&view_distance=float",
			 "requirements": "pair of float numbers equal to ESPG:4326 (x,y) coordinates"
			}
		}, 
	"examples":{
				"Python_request_sample":"r = requests.get('http://127.0.0.1:5000/Visibility_analysis/Visibility_analysis?city=Saint_Petersburg&x_from=59.944548&y_from=30.304617&view_distance=700')"
			   }},


"Weighted_voronoi":{
	"methods":{
		"/voronoi/weighted_voronoi_calculation": {
			"description": "return valid geojson, based on inputed geosjon, with geoemetry of weighted voronoi polygons, input .geojons crs should be only epsg3857", 
		    "response_shema": {
				"voronoi_polygons":"geojson of weighted voronoi polygons",
		        "deficit_zones":"geojson of deficit zones of weighted voronoi polygons"},
			"method": "POST", 
			"data": "Valid geosjson required, more in 'examples'", 
			"Url_format": null},

	 "examples":{
		 "Python_request_sample": "requests.post('http://127.0.0.1:5000/voronoi/Weighted_voronoi_calculation', data = json.dumps(geojson))",
		 "geojson_example": {"city": "Saint_Petersburg",
							"geojson": {"type": "FeatureCollection", "name": "test", "crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:EPSG::3857"}},
		 					 "features": [{"type": "Feature", "properties": {"weight": 5.330623275960242}, "geometry": {"type": "Point", "coordinates": [3365424.7412466537, 8388892.177795848]}},
										  {"type": "Feature", "properties": {"weight": 6.51134526170844}, "geometry": {"type": "Point", "coordinates": [3366784.3993621334, 8390015.740133371]}},
									      {"type": "Feature", "properties": {"weight": 4.7412358799581495}, "geometry": {"type": "Point", "coordinates": [3366811.6122107455, 8384317.056265167]}}]
										}}
					}}},


"Instagram":{
	"methods":{
		"instagram_concentration/get_squares":{
			"description": "return geojson in epsg=4326 which matches with arguments", 
		    "method": "GET", 
		    "data": "year:{2018,2019,2020}, season:{white_nights,summer,winter,spring+autumn}, day_time:{dark,light}",
		    "Url_format": "/instagram_concentration/get_squares?year=int&season=str&day_time=str"
			}
		},
	"examples":{
		"Python_request_sample": "requests.get('http://127.0.0.1:5000/instagram_concentration/get_squares?year=2020&season=winter&day_time=dark')"}
	},


"House_location":{
	"methods":{
		"/house_location/house_location":{
			"description": "return scored blocks/municipalities geojsons, based on user reqest (area, floors, population, services)", 
           	"method": "POST", 
           	"data": "user specified options: area - float/int, floors - float/int, population - int, services - list of string.",
           	"Url_format": "null",
           	"examples": {
				   "python_request_sample": "r = requests.post('http://127.0.0.1:5000/house_location/house_location', data=json.dumps(user_request))",
                            "data_sample": {
								"area": 2000,
								"floors": 5,
								"population": 300,
								"service_types": ["garbage_containers", "bakeries", "dentists", "parkings", "pet_shops"]}}
							},

           "/house_location/block_provision":{
			   "description": "return block geojsons with information of average services provision before/after new house construction, based on user reqest (block id, population, services)", 
			   "method": "POST", 
			   "data": "user specified options: block_id - int, population - int, services - list of string.",
			   "Url_format": "null",
		       "examples": {
				   "python_request_sample": "r = requests.post('http://127.0.0.1:5000/house_location/block_provision', data=json.dumps(user_request))",
                    "data_sample": {
						"block_id": 856,
                        "population": 300,
                        "service_types": ["garbage_containers", "bakeries", "dentists", "parkings", "pet_shops"]}}}
			}},


"House_selection":{
	"methods":{
		"/house_selection/social_groups_list":{
			"description": "return list with social groups names",
			"method": "GET", 
			"data": "null", 
			"Url_format": "null"
				},

		"/house_selection/house_selection":{
			"description": "return scored houses/municipalities geojsons, based on user reqest",
			"method": "POST", 
			"data": "user specified options more in examples", 
			"Url_format": "null"},

		"examples":{
			"Python_request_sample": "r = requests.post('http://172.17.0.2:5000/house_selection/House_selection', data = json.dumps(data))",
			"response_sample": "samples available in/house_selection/test response",
			"data_sample": {
				"user_selected_significant_services": ["Урна", "Автозаправка"],
				"user_selected_unsignificant_services": ["Кафе/столовая"],
				"user_social_group_selection": "Дети младшего школьного возраста (7-11)",
				"user_price_preferences":[20000,30000]}
	}}},


"Service_location":{
	"methods":{
		"/service_location/service_location":{
			"description": "return scored houses/municipalities geojsons, based on user reqest",
			"method": "POST",
			"data": "user specified options more in examples",
			"Url_format": "null"},

		"examples":{
			"Python_request_sample": "r = requests.post('http://172.17.0.2:5000/service_location/service_location', data = json.dumps(data))",
			"response_sample": "samples available in/house_selection/test response",
			"data_sample": {
				"user_service_choice": "Кафе/столовая",
               "user_unit_square_min": 10,
               "user_unit_square_max": 50}
	}}},


"Blocks_Clusterization":{
	"methods": {

		"/blocks_clusterization/get_blocks":{
			"description": "return blocks geojsons with cluster labels, number of services and deviation from the cluster mean values, based on user request - list of services, number of clusters. If number of clusters is not specified, don't send this parameter in the request", 
          	"method": "POST", 
          	"data": "user specified options: clusters_number (on demand) - int, services (required) - list of string.",
          	"Url_format": "null"},

		"/blocks_clusterization/get_services":{
			"description": "return services geojsons in specified block", 
			"method": "POST", 
			"data": "user specified options: block_id (required) - int, services (required) - list of string.",
			"Url_format": "null"},

		"/blocks_clusterization/get_dendrogram":{
			"description": "return image of dendrogram based on user request - list of services, number of clusters. If number of clusters is not specified, don't send this parameter in the request", 
			"method": "POST", 
			"data": "user specified options: clusters_number (on demand) - int', services (required) - list of string.",
			"Url_format": "null"},

		"/blocks_clusterization/documentation":{
			"description": "return documentation.json", 
			"method": "GET", 
			"data": "null",
			"Url_format": "null"}},

	"examples":{
		"get_blocks method": {
			"python_request_sample": "r = requests.post('http://127.0.0.1:5000/blocks_clusterization/get_blocks', data=json.dumps(user_request))",
			"data_sample": {"city": "Saint_Petersburg", "param": {"clusters_number": "default",
				"service_types": ["garbage_containers", "bakeries", "dentists", "parkings", "pet_shops"]}},

			"get_services method": {
				"python_request_sample": "r = requests.post('http://127.0.0.1:5000/blocks_clusterization/get_services', data=json.dumps(user_request))",
				"data_sample": {"city": "Saint_Petersburg",
					"param":{"service_types": ["bars", "cafes", "colleges", "restaurants"],
						"area": {"block": 856}}}},
			"python_response_sample": "samples available in /blocks_clusterization/test method"}
	},
		"get_dendrogram method": {
			"python_request_sample": "r = requests.post('http://127.0.0.1:5000/blocks_clusterization/get_dendrogram', data=json.dumps(user_request))",
			"data_sample": {"city": "Saint_Petersburg",
							"param": {"clusters_number": "default",
			"service_types": ["garbage_containers", "bakeries", "dentists", "parkings", "pet_shops"]}}}},


"Services_clusterization":{
	"methods":{
		"/services_clusterization/get_services":{
			"description": "return services geojsons", 
            "method": "POST", 
            "param": {
				"service_types (required)": "list of string",
                "area (on demand)": {"area_type - mo or district": "area id"}},   
            "Url_format": "null"},

		"/services_clusterization/get_clusters_polygons":{
			"description": "return polygons of clusters geojson",
			"method": "POST",
			"param": {
				"service_types (required)": "list of string",
				"area (on demand)": {
					"area_type - mo or district": "area id"},
				"condition (on demand)": {
					"clusterization criterion - distance or maxclust": "value - int/float"},
				"n_std": "value - int"},
			"Url_format": "null"},

    "examples": {
		"get_services method": {
			"python_request_sample": "r = requests.post('http://127.0.0.1:5000/services_clusterization/get_services', data=json.dumps(user_request))",
            "data_sample": {"city": "Saint_Petersburg",
							"param":{"service_types": ["bars", "cafes", "colleges", "restaurants"],
								"area": {"mo": 95}}}},
    
    	"get_clusters_polygons method": {
			"python_request_sample": "r = requests.post('http://127.0.0.1:5000/services_clusterization/get_clusters_polygons', data=json.dumps(user_request))",
            "data_sample": {"city": "Saint_Petersburg",
							"param": {"service_types": ["schools", "kindergartens", "colleges", "universities"],
								"condition": {"distance": 4000},
								"n_std":  2}}},
    
			"python_response_sample": "samples available in /services_clusterization/test method"}}
		},

"Spacematrix": {
	"methods": {
		"spacematrix/get_objects":
		{"description": "return two valid GeoJSON files of polygon geoobjects (result[0] - blocks, result[1] - buildings) that contain information of geoobjects (blocks - area, geometry; buildings - type, floors, area, living_space, geometry) within given polygon (user-defined polygon or polygon of district/municipality from http://10.32.1.62:1243/api/ by name)",
         "method": "GET",
         "data": "null",
         "Url_format": {"within user-defined polygon": "/spacematrix/get_objects?polygon=[array]",
                        "within  district": "/spacematrix/get_objects?districts=string",
                        "within  municipality": "/spacematrix/get_objects?municipalities=string",
                        "requirements": {"within user-defined polygon": "array of at least three coordinate-tuple that contain pairs of float numbers in EPSG:4326 - [(x1, y1), (x2, y2), (x3, y3)]",
                                         "within  district": "district name as a string value",
                                         "within  municipality": "municipality name as a string value"}}},

        "spacematrix/get_indices":
        {"description": "return valid GeoJSON file of polygon geoobjects that contains specified index (FSI, GSI, OSR, L, MXI, Spacematrix) for blocks within given polygon (user-defined polygon or polygon of district/municipality from http://10.32.1.62:1243/api/ by name)",
         "method": "GET",
         "data": "null",
         "Url_format": {"within user-defined polygon": "/spacematrix/get_indices?polygon=[array]&index=string",
                        "within  district": "/spacematrix/get_indices?districts=string&index=string",
                        "within  municipality": "/spacematrix/get_indices?municipalities=string&index=string",
                        "requirements": {"within user-defined polygon": "array of at least three coordinate-tuple that contain pairs of float numbers in EPSG:4326 - [(x1, y1), (x2, y2), (x3, y3)], index as a string value",
                                         "within  district": "district name as a string value, index as a string value",
                                         "within  municipality": "municipality name as a string value, index as a string value"}}},

    "spacematrix/documentation":
        {"description": "return documentation.json",
         "method": "GET",
         "data": "null",
         "Url_format": "null"},

    "spacematrix/test":
        {"description": "return python response sample",
         "method": "GET",
         "data": "null",
         "Url_format": "null"}},

"examples":
    {"Python_request_sample": {"get_objects_blocks/buildings": "requests.get('http://127.0.0.1:5000/spacematrix/get_objects?polygon=[(30.260792, 59.937916), (30.275982, 59.942307), (30.280537, 59.938393), (30.265454, 59.93395)]')",
                               "get_indices_GSI": "requests.get('http://127.0.0.1:5000/spacematrix/get_indices?municipalities=Академическое&index=GSI')",
                               "get_indices_Spacematrix": "requests.get('http://127.0.0.1:5000/spacematrix/get_indices?districts=Василеостровский&index=Spacematrix')"}}
},


"Diversity":{
	"methods":{
		"/diversity/diversity":{
			"description": "return scored blocks/municipalities geojsons that contains service diversity index, based on user reqest",
			"method": "GET",
			"data": "user specified options more in examples",
			"Url_format": "null"},

		"examples":{
			"Python_request_sample": "r = requests.get('http://172.17.0.2:5000/diversity/diversity?service_type=cafes')"
	}}},

"Provision": {
	"methods": {
		"/provision/get_provision": {
			"description": "return houses geojson in specified area (district, mo or user polygon) and services geojson (where people go from houses)",
			"method": "POST",
			"data": {"description": "params 'service_type', 'provision_type' necessarily have to be in request. Params 'area', 'without_services_options', 'load_options', 'provision_option', 'is_weighted', 'service_coef' are optional.",
					 "params": {"service_type":  "string (if only one service type is specified) or list of string (if weighted provision must be returned)",
					 			"area":  "dict or None, default - None (area type (district, mo, polygon) as key, area id (or geojson for polygon) as value. if area is not specified (None), geometry of all city will be used. Use whole city area may take a long time)",
					 			"provision_type":  "string (calculated or normative)",
					 			"without_services_options":  "boolean - False or True, default - False (False - show al houses, True - show only houses without services in available area). Use with only one specified service type.",
					 			"load_options":  "None or integer, default - None (None - show all services, 0 - show only fully loaded services, 1 - show only services with a margin of capacity).",
					 			"provision_option":  "None or integer, default - None (None - show all houses, 0 - show only houses with provision lower than (or equal to) 0.9 (don't fully provided), 1 - show only houses with provision more than 0.9 (fully provided)). Use with one specified service type or with is_weighted - True",
					 			"is_weighted": "boolean, default - False (False - return service provision evaluations separately (bars_provision_normative, ... etc.),  True - return weighted service evaluation (provision_weighted))",
					 			"service_coef": "None or dict, default - None (service type as key and coefficient as value, sum of coefficient must be equal 1)"}},
			"Url_format": "null"},

		"/provision/get_info": {
			"description": "return two geojson that contain information about specified house/service and other objects (for house - service and for service - houses) placed in it's available zone. If result contains only one type of services, available isochrone will be also returned as separate geojson",
			"method": "POST",
			"data": {"description": "params 'service_type', 'object_type', 'functional_object_id', 'provision_type' necessarily have to be in request. Params 'is_weighted', 'service_coef' are optional.",
					"data":  {"object_type": "string (house or service)",
							  "functional_object_id":  " integer (house/service functional in from DB)",
							  "service_type":  "string (if only one service type is specified) or list of string (if weighted provision must be returned)",
							  "provision_type": "string (calculated or normative)",
						      "is_weighted": "boolean, default - False (False - return service provision evaluations separately (bars_provision, ... etc.),  True - return weighted service evaluation (provision_weighted)). Use only when object_type is house",
							  "service_coef": "None or dict, default - None (service type as key and coefficient as value, sum of coefficient must be equal 1)"}},
			"Url_format": "null"},

		"examples": {
			"get_provision":{
				"python_request_sample": "r = requests.post('http://127.0.0.1:5000/provision/get_provision', data=json.dumps(user_request))",
				"user_request_1": {"service_type": "bars",
									"area": {"district": 61},
									"provision_type": "normative"},
				"user_request_2": {"service_type": "bars",
									"area": {"polygon": {
										"type": "FeatureCollection",
										"name": "polygon",
										"crs": {"type": "name",
											"properties": {"name": "urn:ogc:def:crs:OGC:1.3:CRS84"}},
										"features": [{"type": "Feature",
											"properties": {"id": 1},
											"geometry": {"type": "MultiPolygon",
												"coordinates": [[[[30.24462720629626, 59.924033767734905],
													[30.279635479780403, 59.98740262761298],
													[30.433133294287792, 59.97887062445059],
													[30.421463869793083, 59.91008535270291],
													[30.290407256237067, 59.894780349804115],
													[30.24462720629626, 59.924033767734905]]]]}}]}},
								   "provision_type": "calculated",
								   "provision_option": 1,
								   "load_options": 0},

				"user_request_3": {"service_type": ["flower_stores", "jewelry_stores"],
									"area": {"mo": 67},
									"provision_type":  "normative",
									"is_weighted":  "True",
									"service_coef":  {"flower_stores": 0.6, "jewelry_stores":  0.4},
									"provision_option":  0}
	},
		"get_info": {
			"python_request_sample": "r = requests.post('http://127.0.0.1:5000/provision/get_info', data=json.dumps(user_request))",
			"user_request_1": {"object_type": "house",
           						"functional_object_id":  112474,
           						"service_type":  "bars",
           						"provision_type": "normative"},
			"user_request_2": {"object_type": "service",
           						"functional_object_id":  156214,
								"service_type":  "pharmacies",
				  			    "provision_type": "calculated"},
			"user_request_3": {"object_type": "house",
           						"functional_object_id":  112225,
								"service_type":  ["bakeries", "banks"],
				  			    "provision_type": "normative"}
		}}}},
"Wellbeing": {
	"methods": {
		"/wellbeing/get_wellbeing": {
			"description": "return houses geojson in specified area (district, mo or user polygon) and services geojson (where people go from houses)",
			"method": "POST",
			"Url_format": "null",
			"data": {"description": "'provision_type' and either 'living_situation_id' or 'user_service_types' necessarily have to be in request.",
					"data":  {
						"living_situation_id": "integer, default - None (id from DB)",
						"user_service_types":  "dict, default - None (service types as keys and coefficients as values)",
						"provision_type": "string (calculated or normative)",
						"area": "dict or None, default - None (area type (district, mo, polygon) as key, area id (or geojson for polygon) as value. if area is not specified (None), geometry of all city will be used. Use whole city area may take a long time)",
						"wellbeing_option": "list of integers, default - None (given list include left and right boundary of wellbeing evaluation)"}}},

		"/wellbeing/get_wellbeing_info": {
			"description": "return two geojson that contain information about specified house/service and other objects (for house - service and for service - houses) placed in it's available zone. If result contains only one type of services, available isochrone will be also returned as a separate geojson. If object type is house, detailed information of service types (provision, coefficients and wellbeing) will be also returned as a separate json",
			"method": "POST",
			"Url_format": "null",
			"data": {"description": "'provision type', 'object_type', 'functional_object_id' and either 'living_situation_id' or 'user_service_types' necessarily have to be in request.",
					"data": {
						"object_type": "string (house or service)",
						"functional_object_id":  "integer (house/service functional in from DB). If object type is service, it must be functional_object_id of service which type is included in user_service_types or corresponded to the specified living situation",
						"provision_type": "string (calculated or normative)",
						"living_situation_id": "integer, default - None (id from DB)",
						"user_service_types":  "dict, default - None (service types as keys and coefficients as values)"}}},

		"examples": {
			"get_wellbeing": {
				"python_request_sample": "r = requests.post('http://127.0.0.1:5000/wellbeing/get_wellbeing', data=json.dumps(user_request))",
				"user_request_1": {"user_service_types": {"flower_stores": 0.6, "jewelry_stores":  0.4},
									"provision_type": "calculated",
									"area": {"mo": 67}},
				"user_request_2": {"living_situation_id": 3,
									"area": {"district": 61},
									"provision_type": "normative",
									"wellbeing_option": [0, 0.4]}},
			"get_wellbeing_info": {
				"python_request_sample": "r = requests.post('http://127.0.0.1:5000/wellbeing/get_wellbeing', data=json.dumps(user_request))",
				"user_request_1": {"object_type": "house",
									"functional_object_id":  133683,
									"provision_type": "normative",
									"living_situation_id": 42}},
				"user_request_2": {"object_type": "house",
									"functional_object_id":  112225,
									"provision_type": "calculated",
									"user_service_types": {"bakeries": 0.5, "banks":  0.5}},
				"user_request_3": {"object_type": "service",
									"functional_object_id":  178534,
									"provision_type": "calculated",
									"living_situation_id": 42}}}}
}





